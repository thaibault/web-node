# Run the following command in the directory where this file lives to build a
# new docker image:

# docker-compose --file base.yml build --no-cache

# Run the following command in the directory where this file lives to start a

# development environment:

# docker-compose --file local.yml up

# production environment:

# docker-compose --file remote.yml up

FROM       pritunl/archlinux
MAINTAINER Torben Sickert <info@torben.website>
LABEL      Description="webNode" Vendor="Torben Sickert Products" Version="1.0"
EXPOSE     80 443
ENV        MAIN_USER_NAME http
# NOTE: Define default user and group ids if one of host isn't provided.
ENV        HOST_GID 33
ENV        HOST_UID 33

# NOTE: "neovim" is only needed for debuging scenarios.
RUN        if ! grep '^\[archlinuxfr\]' /etc/pacman.conf &>/dev/null; then echo -n -e '\n[archlinuxfr]\nSigLevel = Optional TrustAll\nServer = http://repo.archlinux.fr/$arch' >>/etc/pacman.conf; fi; \
           pacman --noprogressbar --refresh --needed --noconfirm --sync \
               yaourt base-devel && \
           # NOTE: We have to patch "makepkg" to use it as root.
           sed --in-place \
                's/if (( EUID == 0 )); then/if (( EUID == 0 )) \&\& false; then/' \
                /usr/bin/makepkg && \
           yaourt --needed --noconfirm --sync sudo nginx npm neovim webnode

WORKDIR    /srv/http/app
RUN        echo -e "worker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include           mime.types;\n    default_type      application/octet-stream;\n    keepalive_timeout 65;\n    resolver          8.8.8.8;\n    include           $(pwd)/backendNginxConfiguration/-*server.txt;\n}" \
               1>/etc/nginx/nginx.conf && \
           mkdir --parents /etc/nginx/html && \
           echo ''>/etc/nginx/html/index.html
RUN        chown --recursive "$MAIN_USER_NAME:users" "$(pwd)" && \
           echo /usr/bin/bash>>/etc/shells && \
           chsh --shell /usr/bin/bash "$MAIN_USER_NAME" && \
           usermod --home "$(pwd)" "$MAIN_USER_NAME" --uid 1000 --gid 100 && \
           echo -e \
               "## Manually edited\n# Users can run any script with sudo.\n%users ALL=(ALL) ALL\n# user ${MAIN_USER_NAME} can run the specified command as sudo without password\n${MAIN_USER_NAME} ALL=(ALL) NOPASSWD:/usr/bin/nginx\n##">>/etc/sudoers
RUN        rm /var/cache/* --recursive --force
RUN        sudo --user "$MAIN_USER_NAME" npm update

# NOTE: We run sudo command in a subshell to avoid unexpected tty stdin/stdout
# redirects.
# TODO if HOST_UID already exists set MAIN_USER_NAME to corresponding user.
ENTRYPOINT nginx && [ ! -z "$HOST_GID" ] && \
           echo "Map group id to host group id ${HOST_GID}." && \
           usermod --gid "$HOST_GID" "$MAIN_USER_NAME"; \
           [ ! -z "$HOST_UID" ] && \
           echo "Map user id to host user id ${HOST_UID}." && \
           usermod --uid "$HOST_UID" "$MAIN_USER_NAME"; \
           # Allow agile cms to manipulate the system wide hosts configuration.
           # NOTE: Docker resets the permissions after each reboot so we have
           # to set them at runtime.
           chown "$MAIN_USER_NAME:users" /etc/hosts; \
           ! echo "$extra" | grep --extended-regexp '(^|.+ )--flags (.*)coreBackendNoTemplateRendering( .+|$)' &>/dev/null && \
           (sudo --user "$MAIN_USER_NAME" echo -e \
            "server {\n    listen 80 default_server;\n    listen 443;\n    server_name localhost;\n    location / {\n        return 503;\n    }\n}">backendNginxConfiguration/-server.txt); \
           ([ ! -z "$UPDATE_NPM" ] || [ ! -d "./node_modules" ]) && \
           echo 'Update node packages.' && \
           sudo --user "$MAIN_USER_NAME" npm update; \
           sudo --user "$MAIN_USER_NAME" npm run start \
               --host-name 127.0.0.1 --port 8080 --log-level info --web-cache \
               --dead-soft-reference-check-properties ${extra}
# region modline
# vim: set tabstop=4 shiftwidth=4 expandtab filetype=dockerfile:
# vim: foldmethod=marker foldmarker=region,endregion:
# endregion
