{
  "name": "web-node",
  "version": "1.0.245",
  "license": "CC-BY-3.0",
  "description": "High level javaScript backend plugin system and configuration merger.",
  "homepage": "https://torben.website/webNode",
  "documentationWebsite": {
    "name": "webNode",
    "trackingCode": "UA-40192634-9"
  },
  "keywords": [
    "web",
    "backend",
    "api",
    "plugin",
    "management"
  ],
  "files": [
    "configurator.compiled.js",
    "configurator.js",
    "index.js",
    "pluginAPI.compiled.js",
    "pluginAPI.js",
    "type.js",
    "unixCrypt.compiled.js",
    "unixCrypt.js"
  ],
  "main": "index.compiled.js",
  "bin": {
    "webNode": "index.compiled.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/webNode.git"
  },
  "scripts": {
    "build": "webOptimizer build",
    "clear": "webOptimizer clear && rm --force log.txt &>/dev/null",
    "document": "webOptimizer document",
    "lint": "webOptimizer check:type; webOptimizer lint",
    "prepare": "yarn build",
    "report:coverage": "nyc report --reporter=text-lcov | coveralls",
    "serve": "webOptimizer build && ./index.compiled.js",
    "start": "yarn serve",
    "test": "cd dummyPlugin && yarn build && cd - && nyc webOptimizer test",
    "test:plain": "cd dummyPlugin && yarn run build && cd - && webOptimizer test",
    "update": "yarn version --patch && yarn publish",
    "update:documentation": "documentationWebsite --log-level info",
    "watch": "webOptimizer build --watch"
  },
  "dependencies": {
    "clientnode": "*",
    "keypress": "*"
  },
  "peerDependencies": {
    "@babel/plugin-transform-runtime": "*"
  },
  "devDependencies": {
    "@babel/cli": "*",
    "babel-eslint": "*",
    "coveralls": "*",
    "documentation-website": "*",
    "eslint": "*",
    "eslint-config-google": "*",
    "eslint-plugin-flowtype": "*",
    "eslint-plugin-jsdoc": "*",
    "flow-bin": "*",
    "jsdoc": "*",
    "nyc": "*",
    "qunit": "*",
    "weboptimizer": "*",
    "webpack": "*",
    "webpack-cli": "*",
    "webpack-dev-server": "*"
  },
  "webNode": {
    "debug": false,
    "encoding": "utf8",
    "interDependencies": {},
    "plugin": {
      "configurationPropertyNames": [
        "webNode"
      ],
      "directories": {
        "internal": {
          "nameRegularExpressionPattern": "^([a-zA-Z].*)$",
          "path": {
            "__evaluate__": "`${currentPath}/plugins/`"
          }
        },
        "external": {
          "nameRegularExpressionPattern": "^([a-z][a-zA-Z0-9]+)[wW]eb[nN]ode[pP]lugin$",
          "path": {
            "__evaluate__": "`${currentPath}/node_modules/`"
          }
        }
      },
      "hotReloading": true
    }
  },
  "webOptimizer": {
    "assetPattern": {
      "javaScript": {
        "pattern": {
          "#": "This is how we can make our main exported artefact executable.",
          "__evaluate__": "`#!/usr/bin/env node\n// -*- coding: utf-8 -*-\n${self.generic.assetPattern.javaScript.pattern}else module.paths.unshift('/application/node_modules');{1}`"
        }
      }
    },
    "exportFormat": {
      "external": "commonjs2",
      "self": "commonjs2"
    },
    "files": {
      "compose": {
        "cascadingStyleSheet": null
      }
    },
    "injection": {
      "internal": {
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'test' ? 'test' : {configurator: './configurator', index: './index', pluginAPI: './pluginAPI', unixCrypt: './unixCrypt'}"
      }
    },
    "module": {
      "aliases": {
        "#": "Use the pre-compiled artefacts.",
        "clientnode/test$": "clientnode/test.compiled"
      },
      "optimizer": {
        "babelMinify": {
          "bundle": {
            "transform": {
              "#": "To provide a logging output we need this feature.",
              "removeConsole": false
            }
          },
          "module": {
            "#": "To provide a logging output we need this feature.",
            "removeConsole": false
          }
        }
      }
    },
    "targetTechnology": "node"
  }
}
